****Features of Java*******


The primary objective of Java programming language creation was to make it portable, simple and secure programming language. 
Apart from this, there are also some excellent features which play an important role in the popularity of this language. 
The features of Java are also known as java buzzwords.

A list of most important features of Java language is given below.

Java Features
Simple
Object-Oriented
Portable
Platform independent
Secured
Robust
Architecture neutral
Interpreted
High Performance
Multithreaded
Distributed
Dynamic
...........................................................................................

****Object-oriented********

Java is an object-oriented programming language. Everything in Java is an object. 
Object-oriented means we organize our software as a combination of different types of objects that incorporates both data and behavior.

Object-oriented programming (OOPs) is a methodology that simplifies software development and maintenance by providing some rules.

Basic concepts of OOPs are:

Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation

...........................................................................................

*******JVM**************************

JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist.
 It is a specification that provides a runtime environment in which Java bytecode can be executed. 
It can also run those programs which are written in other languages and compiled to Java bytecode.

************JRE***********
JRE is an acronym for Java Runtime Environment. 
It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. 
It is used to provide the runtime environment. 
It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.

The implementation of JVM is also actively released by other companies besides Sun Micro Systems.

****JDK*****
JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets.
 It physically exists. It contains JRE + development tools.

JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:

Standard Edition Java Platform
Enterprise Edition Java Platform
Micro Edition Java Platform
The JDK contains a private Java Virtual Machine (JVM) and a few other resources such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc. 
to complete the development of a Java Application.

.........................................................................................................................................................................................................

********1) Local Variable*******
A variable declared inside the body of the method is called local variable. 
You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.

A local variable cannot be defined with "static" keyword.

**********2) Instance Variable************
A variable declared inside the class but outside the body of the method, is called instance variable. It is not declared as static.

It is called instance variable because its value is instance specific and is not shared among instances.

**************3) Static variable***********
A variable which is declared as static is called static variable. It cannot be local. 
You can create a single copy of static variable and share among all the instances of the class. 
Memory allocation for static variable happens only once when the class is loaded in the memory.

...............................................................................................

*************Data Types in Java*******
Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:

Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

.................................................................................................

*************Java Operator Precedence*****

Operator Type	Category	Precedence
Unary	postfix	expr++ expr--
prefix	++expr --expr +expr -expr ~ !
Arithmetic	multiplicative	* / %
additive	+ -
Shift	shift	<< >> >>>
Relational	comparison	< > <= >= instanceof
equality	== !=
Bitwise	bitwise AND	&
bitwise exclusive OR	^
bitwise inclusive OR	|
Logical	logical AND	&&
logical OR	||
Ternary	ternary	? :
Assignment	assignment	= += -= *= /= %= &= ^= |= <<= >>= >>>=


...............................................................................................

*******************************Java Keywords*******

Java keywords are also known as reserved words. Keywords are particular words which acts as a key to a code. These are predefined words by Java so it cannot be used as a variable or object name.

List of Java Keywords
A list of Java keywords or reserved words are given below:

**abstract: Java abstract keyword is used to declare abstract class. Abstract class can provide the implementation of interface. It can have abstract and non-abstract methods.
**boolean: Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.
**break: Java break keyword is used to break loop or switch statement. It breaks the current flow of the program at specified condition.
**byte: Java byte keyword is used to declare a variable that can hold an 8-bit data values.
**case: Java case keyword is used to with the switch statements to mark blocks of text.
**catch: Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.
**char: Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters
**class: Java class keyword is used to declare a class.
**continue: Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.
**default: Java default keyword is used to specify the default block of code in a switch statement.
**do: Java do keyword is used in control statement to declare a loop. It can iterate a part of the program several times.
**double: Java double keyword is used to declare a variable that can hold a 64-bit floating-point numbers.
**else: Java else keyword is used to indicate the alternative branches in an if statement.
enum: Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.
extends: Java extends keyword is used to indicate that a class is derived from another class or interface.
final: Java final keyword is used to indicate that a variable holds a constant value. It is applied with a variable. It is used to restrict the user.
finally: Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether exception is handled or not.
float: Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.
for: Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some conditions become true. 
If the number of iteration is fixed, it is recommended to use for loop.
if: Java if keyword tests the condition. It executes the if block if condition is true.
implements: Java implements keyword is used to implement an interface.
import: Java import keyword makes classes and interfaces available and accessible to the current source code.
instanceof: Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.
int: Java int keyword is used to declare a variable that can hold a 32-bit signed integer.
interface: Java interface keyword is used to declare an interface. It can have only abstract methods.
long: Java long keyword is used to declare a variable that can hold a 64-bit integer.
native: Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).
new: Java new keyword is used to create new objects.
null: Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.
package: Java package keyword is used to declare a Java package that includes the classes.
private: Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.
protected: Java protected keyword is an access modifier. It can be accessible within package and outside the package but through inheritance only. It can't be applied on the class.
public: Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.
return: Java return keyword is used to return from a method when its execution is complete.
short: Java short keyword is used to declare a variable that can hold a 16-bit integer.
static: Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is used for memory management mainly.
strictfp: Java strictfp is used to restrict the floating-point calculations to ensure portability.
super: Java super keyword is a reference variable that is used to refer parent class object. It can be used to invoke immediate parent class method.
switch: The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.
synchronized: Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.
this: Java this keyword can be used to refer the current object in a method or constructor.
throw: The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exception. It is followed by an instance.
throws: The Java throws keyword is used to declare an exception. Checked exception can be propagated with throws.
transient: Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.
try: Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.
void: Java void keyword is used to specify that a method does not have a return value.
volatile: Java volatile keyword is used to indicate that a variable may change asynchronously.
while: Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop.

...........................................................................................................................................................................


